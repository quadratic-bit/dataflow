"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[306],{7043:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var i=t(5893),s=t(1151);const c={sidebar_position:3,title:"Dependency System"},l="Dependency System",r={id:"tutorial/dependency",title:"Dependency System",description:"Setup",source:"@site/docs/tutorial/dependency.md",sourceDirName:"tutorial",slug:"/tutorial/dependency",permalink:"/dataflow/docs/tutorial/dependency",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Dependency System"},sidebar:"tutorial",previous:{title:"Collection",permalink:"/dataflow/docs/tutorial/collection"},next:{title:"Locali(z/s)ation",permalink:"/dataflow/docs/tutorial/localization"}},o={},d=[{value:"Setup",id:"setup",level:3},{value:"Select Dependency",id:"select-dependency",level:3},{value:"Filters",id:"filters",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dependency-system",children:"Dependency System"}),"\n",(0,i.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.p,{children:"Let's say we have the following two interfaces:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface User {\n    id: number,\n    name: string\n}\n\ninterface Item {\n    id: number,\n    owner: number,\n    label: string\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Assume ",(0,i.jsx)(n.code,{children:"owner"})," field holds corresponding ",(0,i.jsx)(n.code,{children:"User.id"}),". Let's create some tables:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'let userTable = collection.new<User>({\n    id: "users",\n    init: "get_users",\n    columns: [\n        { name: "id", type: "number" },\n        { name: "name", type: "string" }\n    ]\n})\n\nlet itemTable = collection.new<Item>({\n    id: "items",\n    init: "get_items",\n    columns: [\n        { name: "id", type: "number" },\n        { name: "owner", type: "number" },\n        { name: "label", type: "text" }\n    ]\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select-dependency",children:"Select Dependency"}),"\n",(0,i.jsxs)(n.p,{children:["What if we want to show corresponding ",(0,i.jsx)(n.code,{children:"User.name"})," instead of ",(0,i.jsx)(n.code,{children:"User.id"})," for each ",(0,i.jsx)(n.code,{children:"Item"}),"\nwithout touching the underlying data? That's where ",(0,i.jsx)(n.em,{children:"dependencies"})," come in:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="dataflow/fields"',children:"function createDependency(tableID: string, column: string, reference: string): SelectDependency\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If some other table within the same collection (like ",(0,i.jsx)(n.code,{children:"User"})," in our case) contains necessary fields,\nwe can change the type of our column slightly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { createDependency } from "dataflow/fields"\n\nlet itemTable = collection.new<Item>({\n    id: "items",\n    init: "get_items",\n    columns: [\n        { name: "id", type: "number" },\n        // highlight-start\n        {\n            name: "owner",\n            type: "select",\n            choices: createDependency("users", "name", "id")\n        },\n        // highlight-end\n        { name: "label", type: "text" }\n    ]\n})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here we specify that we want to replace ",(0,i.jsx)(n.code,{children:"Item.owner"})," field with ",(0,i.jsx)(n.code,{children:"User.name"})," from ",(0,i.jsx)(n.code,{children:"users"})," table\nwhere value of ",(0,i.jsx)(n.code,{children:"Item.owner"})," matches with ",(0,i.jsx)(n.code,{children:"User.id"})]}),"\n",(0,i.jsxs)(n.p,{children:["HTML field for ",(0,i.jsx)(n.code,{children:"owner"})," field has also changed \u2014 it is now\n",(0,i.jsx)(n.code,{children:"<select>"})," tag with all values pulled from ",(0,i.jsx)(n.code,{children:"users"})," table"]}),"\n",(0,i.jsx)(n.h3,{id:"filters",children:"Filters"}),"\n",(0,i.jsx)(n.p,{children:"If we want to be able to filter through specific values of dependency\n(especially in One-To-Many relationship) we need to activate the filter during init:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'let itemTable = collection.new<Item>({\n    id: "items",\n    init: "get_items",\n    columns: [\n        { name: "id", type: "number" },\n        {\n            name: "owner",\n            type: "select",\n            choices: createDependency("users", "name", "id"),\n            // highlight-start\n            filterable: true\n            // highlight-end\n        },\n        { name: "label", type: "text" }\n    ]\n})\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>l});var i=t(7294);const s={},c=i.createContext(s);function l(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);