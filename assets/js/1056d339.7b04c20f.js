"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[686],{225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>r});var o=n(4848),l=n(8453);const i={sidebar_position:2,title:"Collection"},a="Collection",c={id:"tutorial/collection",title:"Collection",description:"Changing tables",source:"@site/docs/tutorial/collection.md",sourceDirName:"tutorial",slug:"/tutorial/collection",permalink:"/dataflow/docs/tutorial/collection",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Collection"},sidebar:"tutorial",previous:{title:"Quick Start",permalink:"/dataflow/docs/tutorial/getting-started/quick-start"},next:{title:"Dependency System",permalink:"/dataflow/docs/tutorial/dependency"}},s={},r=[{value:"Changing tables",id:"changing-tables",level:3}];function d(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"collection",children:"Collection"}),"\n",(0,o.jsx)(t.h3,{id:"changing-tables",children:"Changing tables"}),"\n",(0,o.jsx)(t.p,{children:"Things get complicated when we have more than one table in the collection:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'let collection = new TableCollection({\n    mount: "tag#id",\n    receiver: async (query: string) => { ... }\n})\nlet table1 = collection.new<Type1>({ id: "table_1", ... })\nlet table2 = collection.new<Type2>({ id: "table_2", ... })\n'})}),"\n",(0,o.jsxs)(t.p,{children:["This will show only table1 and its rows. Since all tables are mounted in the same HTML node\n(",(0,o.jsx)(t.code,{children:'"tag#id"'})," in our case) we'll need a way to switch between them."]}),"\n",(0,o.jsx)(t.p,{children:"Dataflow does not have a built-in switcher,\nso you'll have to implement it with the following methods in your disposal:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'// Find a table by ID\nlet table_1: Table<Type1> | null = collection.find("table_1")\n\n// Switch to another table by ID\nlet table_2: Table<Type2> | null = collection.swap("table_2")\n'})}),"\n",(0,o.jsx)(t.p,{children:"There are also methods for manual table mounting and umnounting, though not recommended for use:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'// Unmount table by ID. Throws an error if no table is mounted.\ncollection.unmount("table_1")\n\n// Mount table by ID. Throws an error if some other table is already mounted or no table with such ID is found.\nlet table_2: Table<Type2> = collection.moun("table_2")\n'})})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var o=n(6540);const l={},i=o.createContext(l);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);